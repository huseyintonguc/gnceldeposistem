import streamlit as st
import pandas as pd
import datetime

# Firebase k√ºt√ºphanelerini import et
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

# --- Firebase'i Ba≈ülat ---
# secrets.toml dosyasƒ±ndan Firebase kimlik bilgilerini y√ºkle
# Streamlit Cloud'da otomatik olarak y√ºklenir.
# Yerelde test ederken secrets.toml dosyasƒ±nƒ±n .streamlit/ klas√∂r√ºnde olduƒüundan emin olun.
try:
    # Eƒüer Firebase zaten ba≈ülatƒ±lmadƒ±ysa ba≈ülat
    if not firebase_admin._apps:
        cred = credentials.Certificate(st.secrets["firebase"])
        firebase_admin.initialize_app(cred)
    
    db = firestore.client() # Firestore istemcisini al
except Exception as e:
    st.error(f"Firebase ba≈ülatƒ±lƒ±rken hata olu≈ütu. L√ºtfen '.streamlit/secrets.toml' dosyanƒ±zƒ± kontrol edin ve talimatlara g√∂re yapƒ±landƒ±rƒ±n: {e}")
    st.stop() # Hata durumunda uygulamayƒ± durdur

# Firestore koleksiyon referanslarƒ±
PRODUCTS_COLLECTION = db.collection("products")
WAREHOUSE_ENTRIES_COLLECTION = db.collection("warehouse_entries")


# --- √úr√ºn Listesini Y√ºkle ve Kaydet ---
@st.cache_data(ttl=3600) # √úr√ºnler genellikle sƒ±k deƒüi≈ümez, 1 saat √∂nbellekte kalabilir
def load_products_from_firestore():
    """Firestore'dan √ºr√ºn listesini y√ºkler."""
    try:
        docs = PRODUCTS_COLLECTION.stream()
        products_list = []
        for doc in docs:
            product_data = doc.to_dict()
            product_data['SKU'] = doc.id # SKU'yu dok√ºman ID'si olarak kullan
            products_list.append(product_data)
        
        df = pd.DataFrame(products_list)
        
        # Gerekli s√ºtunlarƒ±n varlƒ±ƒüƒ±nƒ± kontrol et
        if 'SKU' not in df.columns or 'Urun Adi' not in df.columns:
            st.sidebar.error("√úr√ºnler koleksiyonunda 'SKU' veya 'Urun Adi' s√ºtunlarƒ± bulunamadƒ±. L√ºtfen Firestore'daki 'products' koleksiyonunuzu kontrol edin.")
            return pd.DataFrame(columns=['SKU', 'Urun Adi'])

        # Sadece gerekli s√ºtunlarƒ± al ve sƒ±rala
        df = df[['SKU', 'Urun Adi']].sort_values(by='Urun Adi', ascending=True).reset_index(drop=True)
        
        if df.empty:
            st.warning("√úr√ºnler listesi bo≈ü g√∂r√ºn√ºyor. L√ºtfen yeni √ºr√ºn ekleyin.")
        else:
            st.sidebar.success("√úr√ºn listesi Firebase Firestore'dan ba≈üarƒ±yla y√ºklendi.")
        return df
    except Exception as e:
        st.error(f"√úr√ºnler Firebase Firestore'dan y√ºklenirken bir hata olu≈ütu: {e}")
        return pd.DataFrame(columns=['SKU', 'Urun Adi'])

def save_product_to_firestore(sku, product_name):
    """Yeni √ºr√ºn√º Firestore'a kaydeder."""
    try:
        # SKU'yu dok√ºman ID'si olarak kullan
        PRODUCTS_COLLECTION.document(sku).set({"Urun Adi": product_name})
        return True
    except Exception as e:
        st.error(f"Yeni √ºr√ºn Firebase Firestore'a kaydedilirken bir hata olu≈ütu: {e}")
        return False

# --- Depo Giri≈ü/√áƒ±kƒ±≈ülarƒ±nƒ± Y√ºkle ve Kaydet ---
@st.cache_data(ttl=1) # Depo giri≈üleri sƒ±k deƒüi≈üir, √∂nbelleƒüi kƒ±sa tut
def load_warehouse_entries_from_firestore():
    """Firestore'dan depo giri≈ü/√ßƒ±kƒ±≈ülarƒ±nƒ± y√ºkler."""
    try:
        docs = WAREHOUSE_ENTRIES_COLLECTION.order_by('Tarih', direction=firestore.Query.DESCENDING).stream()
        entries_list = []
        for doc in docs:
            entry_data = doc.to_dict()
            entries_list.append(entry_data)
        
        df = pd.DataFrame(entries_list)
        
        # Gerekli s√ºtunlarƒ±n varlƒ±ƒüƒ±nƒ± kontrol et
        required_cols = ['Tarih', 'SKU', 'Urun Adi', 'Adet', 'Islem Tipi']
        if not all(col in df.columns for col in required_cols):
            st.sidebar.error("Depo giri≈üleri koleksiyonunda eksik s√ºtunlar var. L√ºtfen Firestore'daki 'warehouse_entries' koleksiyonunuzu kontrol edin.")
            return pd.DataFrame(columns=required_cols)

        # Tarih s√ºtununu d√ºzg√ºnce datetime.date objesine √ßevir
        if 'Tarih' in df.columns:
            df['Tarih'] = df['Tarih'].apply(lambda x: datetime.datetime.strptime(x, '%Y-%m-%d').date() if isinstance(x, str) else x)

        if df.empty:
            st.warning("Depo giri≈üleri listesi bo≈ü g√∂r√ºn√ºyor. Yeni giri≈üler beklenecek.")
        else:
            st.sidebar.success("Depo giri≈üleri Firebase Firestore'dan ba≈üarƒ±yla y√ºklendi.")
        return df
    except Exception as e:
        st.error(f"Depo giri≈üleri Firebase Firestore'dan y√ºklenirken bir hata olu≈ütu: {e}")
        return pd.DataFrame(columns=['Tarih', 'SKU', 'Urun Adi', 'Adet', 'Islem Tipi'])

def add_warehouse_entry_to_firestore(entry_data):
    """Yeni depo giri≈ü/√ßƒ±kƒ±≈üƒ±nƒ± Firestore'a ekler."""
    try:
        # Otomatik ID ile yeni bir dok√ºman ekle
        WAREHOUSE_ENTRIES_COLLECTION.add(entry_data)
        return True
    except Exception as e:
        st.error(f"Depo giri≈üi/√ßƒ±kƒ±≈üƒ± Firebase Firestore'a kaydedilirken bir hata olu≈ütu: {e}")
        return False

# --- Uygulama Ba≈ülƒ±ƒüƒ± ---
st.set_page_config(layout="centered", page_title="Depo Giri≈ü/√áƒ±kƒ±≈ü Kayƒ±t Sistemi")
st.title("üì¶ Depo Giri≈ü/√áƒ±kƒ±≈ü Kayƒ±t Sistemi")
st.markdown("G√ºn i√ßinde depoya alƒ±nan ve depodan √ßƒ±kan √ºr√ºnleri buraya kaydedin.")

# --- Session State Ba≈ülatma ---
if 'products_df' not in st.session_state or st.session_state['products_df'].empty:
    st.session_state['products_df'] = load_products_from_firestore()

if 'warehouse_entries_df' not in st.session_state or st.session_state['warehouse_entries_df'].empty:
     st.session_state['warehouse_entries_df'] = load_warehouse_entries_from_firestore()

products_df = st.session_state['products_df']
warehouse_entries_df = st.session_state['warehouse_entries_df']


# --- Yeni √úr√ºn Ekleme B√∂l√ºm√º ---
st.markdown("---")
st.subheader("‚ûï Yeni √úr√ºn Ekle")
new_product_sku = st.text_input("Yeni √úr√ºn SKU'su (Benzersiz Olmalƒ±)", key="new_sku_input").strip()
new_product_name = st.text_input("Yeni √úr√ºn Adƒ±", key="new_product_name_input").strip()

if st.button("Yeni √úr√ºn√º Kaydet"):
    if new_product_sku and new_product_name:
        # SKU'nun benzersizliƒüini Firestore'da kontrol et
        if PRODUCTS_COLLECTION.document(new_product_sku).get().exists:
            st.warning(f"SKU '{new_product_sku}' zaten mevcut. L√ºtfen farklƒ± bir SKU girin.")
        else:
            if save_product_to_firestore(new_product_sku, new_product_name):
                st.success(f"Yeni √ºr√ºn **{new_product_name}** (SKU: **{new_product_sku}**) ba≈üarƒ±yla eklendi!")
                load_products_from_firestore.clear() # √úr√ºn √∂nbelleƒüini temizle
                st.session_state['products_df'] = load_products_from_firestore() # G√ºncel veriyi yeniden y√ºkle
                st.rerun() # Sayfayƒ± yeniden y√ºkle
            else:
                st.error("Yeni √ºr√ºn kaydedilirken bir sorun olu≈ütu.")
    else:
        st.warning("L√ºtfen hem SKU hem de √úr√ºn Adƒ± girin.")

st.markdown("---") 

# Eƒüer √ºr√ºn listesi bo≈üsa uyarƒ± ver
if products_df.empty:
    st.warning("√úr√ºn listesi bo≈ü veya y√ºklenemedi. L√ºtfen Firebase Firestore'daki √ºr√ºnler koleksiyonunuzu kontrol edin veya yukarƒ±dan yeni √ºr√ºn ekleyin.")
else:
    # --- √úr√ºn Arama ve Se√ßme ---
    st.subheader("√úr√ºn Bilgileri")

    search_query = st.text_input("√úr√ºn Adƒ± veya SKU ile Ara", key="search_input_val").strip() 

    filtered_products = products_df.copy()
    if 'Urun Adi' in filtered_products.columns and 'SKU' in filtered_products.columns:
        if search_query: 
            filtered_products = products_df[
                products_df['Urun Adi'].str.contains(search_query, case=False, na=False) |
                products_df['SKU'].str.contains(search_query, case=False, na=False) 
            ]
            if filtered_products.empty:
                st.info("Aradƒ±ƒüƒ±nƒ±z √ºr√ºn bulunamadƒ±.")
    else:
        st.warning("√úr√ºn arama ve filtreleme yapƒ±lamƒ±yor: 'Urun Adi' veya 'SKU' s√ºtunlarƒ± bulunamadƒ±.")
        filtered_products = pd.DataFrame(columns=['SKU', 'Urun Adi']) 

    product_options = [f"{row['SKU']} - {row['Urun Adi']}" for index, row in filtered_products.iterrows()]
    
    selected_product_display = st.selectbox(
        "√úr√ºn Se√ßin",
        options=['Se√ßiniz...'] + product_options,
        key="product_select_val" 
    )

    selected_sku = None
    selected_product_name = None

    if selected_product_display != 'Se√ßiniz...':
        parts = selected_product_display.split(' - ', 1) 
        selected_sku = parts[0]
        selected_product_name = parts[1] if len(parts) > 1 else "" 
        st.info(f"Se√ßilen √úr√ºn: **{selected_product_name}** (SKU: **{selected_sku}**)")

    # --- ƒ∞≈ülem Tipi ve Adet Giri≈üi ---
    st.subheader("ƒ∞≈ülem Detaylarƒ±")

    transaction_type = st.radio(
        "ƒ∞≈ülem Tipi",
        ('Giri≈ü', '√áƒ±kƒ±≈ü'),
        key="transaction_type_val"
    )

    quantity_label = "Alƒ±nan Adet" if transaction_type == 'Giri≈ü' else "Verilen Adet"
    
    quantity_default = st.session_state.get("quantity_input_val", 1) 
    quantity = st.number_input(quantity_label, min_value=1, value=quantity_default, step=1, key="quantity_input_val")

    entry_date = st.date_input("Tarih", value=datetime.date.today(), key="date_input_val")

    # --- Kaydet Butonu ---
    if st.button("Kaydet"):
        if selected_sku and quantity > 0:
            entry_data = {
                'Tarih': entry_date.isoformat(), # Firebase i√ßin tarihleri string olarak sakla
                'SKU': selected_sku,
                'Urun Adi': selected_product_name,
                'Adet': quantity,
                'Islem Tipi': transaction_type
            }
            
            if add_warehouse_entry_to_firestore(entry_data): 
                st.success(f"**{quantity}** adet **{selected_product_name}** ({selected_sku}) **{entry_date.strftime('%d.%m.%Y')}** tarihinde **{transaction_type}** olarak kaydedildi!")
                
                load_warehouse_entries_from_firestore.clear() # √ñnbelleƒüi temizle
                st.session_state['warehouse_entries_df'] = load_warehouse_entries_from_firestore() # G√ºncel veriyi yeniden y√ºkle
                
                st.rerun() 
            
        else:
            st.warning("L√ºtfen bir √ºr√ºn se√ßin ve ge√ßerli bir adet girin.")

    st.markdown("---")
    st.subheader("Son Depo Giri≈üleri")
    if not warehouse_entries_df.empty:
        # Tarih s√ºtunu zaten datetime.date objesi olarak y√ºkleniyor, ISO formatƒ±na √ßevirmeye gerek yok
        st.dataframe(warehouse_entries_df.sort_values(by='Tarih', ascending=False).head(10))
    else:
        st.info("Hen√ºz hi√ß depo giri≈üi yapƒ±lmadƒ±.")

    st.markdown("---")
    st.subheader("T√ºm Depo Giri≈üleri")
    if not warehouse_entries_df.empty:
        df_for_download = warehouse_entries_df.copy()
        # Tarihleri indirme i√ßin string formatƒ±na √ßevir
        if 'Tarih' in df_for_download.columns:
            df_for_download['Tarih'] = df_for_download['Tarih'].apply(lambda x: x.isoformat() if isinstance(x, datetime.date) else x)

        csv_data = df_for_download.to_csv(index=False, encoding='utf-8-sig', sep=';') 
        st.download_button(
            label="T√ºm Depo Giri≈ülerini ƒ∞ndir (CSV)",
            data=csv_data,
            file_name="tum_depo_girisleri.csv",
            mime="text/csv",
        )
        st.dataframe(warehouse_entries_df)
    else:
        st.info("ƒ∞ndirilecek depo giri≈üi verisi bulunmuyor.")

    st.markdown("---")
    st.subheader("Mevcut √úr√ºnler Listesi")
    if not products_df.empty:
        st.dataframe(products_df)
    else:
        st.info("Mevcut √ºr√ºn bulunmuyor. L√ºtfen yukarƒ±dan yeni √ºr√ºn ekleyin.")
